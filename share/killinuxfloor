#!/bin/bash

set -Eeu

function print_help ()
{
    #echo "Usage: killinuxfloor {start|stop|restart|status|update [preview]|log|config|purge <map_id>|init|help}"
    echo "killinuxfloor - Killing Floor 2 Linux Server Installer and Manager (c) noobient"
    echo ""
    echo "Usage:"
    echo "------"
    echo -e "\e[36mkillinuxfloor config\e[0m \t\t insert your own settings into the internal KF2 server config without restarting KF2"
    echo -e "\e[36mkillinuxfloor apply\e[0m \t\t apply your changes instantly, equivalent to running 'config' and 'restart'"
    echo -e "\e[36mkillinuxfloor reset\e[0m \t\t reset internal config and erase the Workshop and Cache folders (don't forget to run 'config' afterwards)"
    echo -e "\e[36mkillinuxfloor start\e[0m \t\t start KF2"
    echo -e "\e[36mkillinuxfloor stop\e[0m \t\t stop KF2"
    echo -e "\e[36mkillinuxfloor restart\e[0m \t\t restart KF2"
    echo -e "\e[36mkillinuxfloor status\e[0m \t\t query the status of the KF2 service"
    echo -e "\e[36mkillinuxfloor status service\e[0m \t same as \e[36mkillinuxfloor status\e[0m"
    if [ "${CLASSIC_MODE}" -eq 1 ]
    then
        echo -e "\e[36mkillinuxfloor status install\e[0m \t show KF2 installation status"
    fi
    echo -e "\e[36mkillinuxfloor status watchdog\e[0m \t show Watchdog status"
    echo -e "\e[36mkillinuxfloor status workshop\e[0m \t show Workshop download status"
    echo -e "\e[36mkillinuxfloor log\e[0m \t\t display the KF2 logs"
    echo -e "\e[36mkillinuxfloor purge <map_id>\e[0m \t remove an installed workshop map"
    if [ "${CLASSIC_MODE}" -eq 1 ]
    then
        echo -e "\e[36mkillinuxfloor update\e[0m \t\t check for and apply KF2 updates (don't forget to run 'init' and 'config' if update found)"
        echo -e "\e[36mkillinuxfloor update preview\e[0m \t apply updates from the 'preview' branch"
    fi
    echo -e "\e[36mkillinuxfloor verify\e[0m \t\t verify integrity of KF2 files"
    if [ "${CLASSIC_MODE}" -eq 1 ]
    then
        echo -e "\e[36mkillinuxfloor verify preview\e[0m \t verify integrity of KF2 files in the 'preview' branch"
    fi
    echo -e "\e[36mkillinuxfloor backup\e[0m \t\t back up all KF2 settings"
    echo -e "\e[36mkillinuxfloor autokick {start|stop|restart|status|log}\e[0m"
    echo -e "\e[36mkillinuxfloor ban {list|add <steamID64>|delete <steamID64>}\e[0m"
    echo -e "\e[36mkillinuxfloor watchdog {enable|disable|status}\e[0m"
    echo -e "\e[36mkillinuxfloor help\e[0m \t\t print this help"
    echo ""
    echo -e "To save typing, you can also use \e[36mkfl\e[0m instead of \e[36mkillinuxfloor\e[0m."
}

function errorexit ()
{
    case $? in
        1)
            print_help
            ;;

        2)
            echo -e "\e[31merror!\e[0m"
            echo -e "File \e[36m${FILE_MISSING}\e[0m not found."
            ;;

        3)
            echo -e "\e[31merror!\e[0m"
            echo -e "Invalid SteamID64. It must be 17 characters long and must contain numbers only."
            echo -e "If unsure, please check on \e[36mhttps://steamidfinder.com/\e[0m"
            ;;

        4)
            echo -e "\e[31merror!\e[0m"
            echo -e "Function not supported in Classic mode. If you didn't intend to install KF2 Classic, please reinstall."
            ;;

    esac
}

trap errorexit EXIT

# variables
LIVE_CONF="${HOME}/Steam/KF2Server/KFGame/Config"
OWN_CONF="${HOME}/Config"
MAP_DIR="${HOME}/Steam/KF2Server/KFGame/BrewedPC/Maps"
MAP_LIST="${OWN_CONF}/My-Maps.csv"
MUTATOR_LIST="${OWN_CONF}/My-Mutators.csv"
CYCLE_LIST="${OWN_CONF}/My-Cycles.csv"
CACHE_DIR="${HOME}/Steam/KF2Server/KFGame/Cache"
WORKSHOP_DIR="${HOME}/Steam/KF2Server/Binaries/Win64/steamapps/workshop"
WORKSHOP_CONTENT_DIR="${WORKSHOP_DIR}/content/232090"
DEPOT_FILE="${HOME}/Steam/KF2Server/.DepotDownloader/depot.config"
CONF_LIST=("autokick.json" "My-Cycles.csv" "My-KFWebAdmin.ini" "My-KFWeb.ini" "My-LinuxServer-KFEngine.ini" "My-LinuxServer-KFGame.ini" "My-Maps.csv" "My-Mutators.csv" "My-Startup.conf")

ECHO_DONE='echo -e \e[32mdone\e[0m.'
CYCLE_START='GameMapCycles=(Maps=("'
CYCLE_END='"))'

# Associative arrays must be declared at the top level:
# https://stackoverflow.com/a/12944790/1708230
declare -A MAPS_WORKSHOP

# Colors
FG_BLACK=$(tput setaf 0)
FG_RED=$(tput setaf 1)
FG_GREEN=$(tput setaf 2)
FG_YELLOW=$(tput setaf 3)
FG_BLUE=$(tput setaf 4)
FG_MAGENTA=$(tput setaf 5)
FG_CYAN=$(tput setaf 6)
FG_WHITE=$(tput setaf 7)

BG_BLACK=$(tput setab 0)
BG_RED=$(tput setab 1)
BG_GREEN=$(tput setab 2)
BG_YELLOW=$(tput setab 3)
BG_BLUE=$(tput setab 4)
BG_MAGENTA=$(tput setab 5)
BG_CYAN=$(tput setab 6)
BG_WHITE=$(tput setab 7)

COLOR_RESET='\e[0m'

function check_file ()
{
    FILE_MISSING=$1
    test -e ${FILE_MISSING} || exit 2
}

function check_newline()
{
    if [[ $(tail -c1 "${1}" | wc -l) -gt 0 ]]
    then
        echo 1
    else
        echo 0
    fi
}

function sanitize_config ()
{
    # cleanup
    echo -n 'Making sure internal INI files are formatted properly... '
    for INI in 'LinuxServer-KFEngine.ini' 'LinuxServer-KFGame.ini'
    do
        # delete repeated newlines
        cp ${LIVE_CONF}/${INI} ${LIVE_CONF}/${INI}.tmp
        cat -s ${LIVE_CONF}/${INI}.tmp > ${LIVE_CONF}/${INI}
        rm ${LIVE_CONF}/${INI}.tmp

        # get rid of spaces around = added by crudini
        sed -i 's/ = /=/' ${LIVE_CONF}/${INI}
    done
    ${ECHO_DONE}

    echo -n 'Making sure own config files are formatted properly... '
    for CONF_FILE in "${CONF_LIST[@]}"
    do
        if [ $(check_newline "${OWN_CONF}/${CONF_FILE}") -eq 0 ]
        then
            echo '' >> "${OWN_CONF}/${CONF_FILE}"

            if [ "${CONF_FILE}" == 'My-Startup.conf' ]
            then
                sudo /bin/systemctl daemon-reload
            fi
        fi
    done
    ${ECHO_DONE}
}

function reset_subscriptions ()
{
    # delete old workshop section from KFEngine altogether
    echo -n 'Deleting old workshop entries... '
    check_file ${LIVE_CONF}/LinuxServer-KFEngine.ini
    crudini --del ${LIVE_CONF}/LinuxServer-KFEngine.ini OnlineSubsystemSteamworks.KFWorkshopSteamworks
    # workshop header
    echo '[OnlineSubsystemSteamworks.KFWorkshopSteamworks]' >> ${LIVE_CONF}/LinuxServer-KFEngine.ini
    ${ECHO_DONE}
}

function subscribe_mutators ()
{
    # parse mutator list
    echo -n 'Subscribing to workshop mutators... '
    check_file ${MUTATOR_LIST}
    check_file ${LIVE_CONF}/LinuxServer-KFEngine.ini
    while read -r line
    do
        [[ $line = \#* ]] || [ -z "$line" ] && continue # skip comments & empty lines
        # add entry to workshop list, can't use crudini here because parameters aren't unique
        echo "ServerSubscribedWorkshopItems=${line}" >> ${LIVE_CONF}/LinuxServer-KFEngine.ini
    done < ${MUTATOR_LIST}
    ${ECHO_DONE}
}

function subscribe_maps ()
{
    # parse map list
    echo -n 'Subscribing to workshop maps... '
    check_file ${MAP_LIST}
    check_file ${LIVE_CONF}/LinuxServer-KFEngine.ini
    while read -r line
    do
        [[ $line = \#* ]] || [ -z "$line" ] && continue # skip comments & empty lines
        ID=$(awk -F "," '{print $1}' <<< ${line})
        # add entry to workshop list, can't use crudini here because parameters aren't unique
        echo "ServerSubscribedWorkshopItems=${ID}" >> ${LIVE_CONF}/LinuxServer-KFEngine.ini
    done < ${MAP_LIST}
    ${ECHO_DONE}
}

function merge_config ()
{
    # merge live ini files with own custom values
    # these must be unique for crudini to work
    # the rest will be generated by this script
    echo -n 'Applying settings to internal config files... '
    for f in $(find -L ${OWN_CONF} -maxdepth 1 -name '*.ini' -type f -printf %f\\n)
    do
        crudini --merge "${LIVE_CONF}/${f#$"My-"}" < "${OWN_CONF}/${f}"
    done
    ${ECHO_DONE}
}

function delete_cycles ()
{
    # delete old cycles
    echo -n 'Deleting old game cycles... '
    check_file ${LIVE_CONF}/LinuxServer-KFGame.ini
    crudini --del ${LIVE_CONF}/LinuxServer-KFGame.ini KFGame.KFGameInfo GameMapCycles
    ${ECHO_DONE}
}

function add_maps ()
{
    # parse map list
    echo -n 'Adding workshop maps to webadmin map list... '
    check_file ${MAP_LIST}
    while read -r line
    do
        [[ $line = \#* ]] || [ -z "$line" ] && continue # skip comments & empty lines
        NAME=$(awk -F "," '{print $2}' <<< ${line})

        # delete old entry from KFGame list to make sure all custom entries are at the end
        crudini --del ${LIVE_CONF}/LinuxServer-KFGame.ini "${NAME} KFMapSummary"

        # add new entry to KFGame list
        crudini --set ${LIVE_CONF}/LinuxServer-KFGame.ini "${NAME} KFMapSummary" "MapName" "${NAME}"
    done < ${MAP_LIST}
    ${ECHO_DONE}
}

function add_cycle_custom ()
{
    # parse custom cycle list
    echo -n 'Adding custom game cycles... '
    check_file ${CYCLE_LIST}
    while read -r line
    do
        [[ $line = \#* ]] || [ -z "$line" ] && continue # skip comments & empty lines
        CYCLE="${CYCLE_START}${line}${CYCLE_END}"
        CYCLE=$(sed 's/,/","/g' <<< ${CYCLE}) # quotes
        sed -i "s/\[KFGame.KFGameInfo\]/&\n${CYCLE}/" ${LIVE_CONF}/LinuxServer-KFGame.ini
    done < ${CYCLE_LIST}
    ${ECHO_DONE}
}

function find_maps_workshop ()
{
    # Parse workshop map list
    check_file ${MAP_LIST}
    while read -r line
    do
        grep -Ei '^[0-9]+,KF-[-_a-z0-9]+$' <<< "${line}" > /dev/null || continue # skip if malformed
        map_id=$(awk -F "," '{print $1}' <<< ${line})
        map_name=$(awk -F "," '{print $2}' <<< ${line})
        MAPS_WORKSHOP+=(["${map_id}"]="${map_name}")
    done < ${MAP_LIST}
}

function find_mutators_workshop ()
{
    MUTATORS_WORKSHOP=()

    # Parse workshop mutator list
    check_file ${MUTATOR_LIST}
    while read -r line
    do
        grep -Ei '^[0-9]+$' <<< "${line}" > /dev/null || continue # skip if malformed
        MUTATORS_WORKSHOP+=("${line}")
    done < ${MUTATOR_LIST}
}

function find_maps_stock ()
{
    MAPS_STOCK=()

    # cycle for stock maps
    for d in $(find ${MAP_DIR} -maxdepth 1 -mindepth 1 -type d -printf %f\\n | grep -v 'SDK\|Templates' | sort)
    do
        MAPS_STOCK+=("KF-${d}")
    done
}

function add_cycle_str ()
{
    MAPS=("$@")
    # skip if map list is empty, e.g. zero workshop maps
    if [ ${#MAPS[@]} -eq 0 ]
    then
        return
    fi

    CYCLE="${CYCLE_START}"
    FIRST=1 # track if we need a comma or not

    for item in "${MAPS[@]}"
    do
        if [ ${FIRST} -ne 1 ]
        then
            CYCLE="${CYCLE},"
        fi
        CYCLE="${CYCLE}${item}"
        FIRST=0

    done

    CYCLE=$(sed 's/,/","/g' <<< ${CYCLE}) # quotes
    CYCLE="${CYCLE}${CYCLE_END}" # terminate

    sed -i "s/\[KFGame.KFGameInfo\]/&\n${CYCLE}/" ${LIVE_CONF}/LinuxServer-KFGame.ini
}

function add_cycles ()
{
    # the cycles added here will be shown in webadmin in reverse order due to sed

    add_cycle_custom

    echo -n 'Adding map cycle for all workshop maps... '
    find_maps_workshop

    # Convert the associative array to list
    MAPS_WORKSHOP_FLAT=()
    for map in "${MAPS_WORKSHOP[@]}"
    do
        MAPS_WORKSHOP_FLAT+=("${map}")
    done

    add_cycle_str "${MAPS_WORKSHOP_FLAT[@]}"
    ${ECHO_DONE}

    echo -n 'Adding map cycle for all stock maps... '
    find_maps_stock
    add_cycle_str "${MAPS_STOCK[@]}"
    ${ECHO_DONE}

    if [ ${#MAPS_WORKSHOP[@]} -gt 0 ]
    then
        echo -n 'Adding map cycle for stock and workshop maps combined... '
        # bash 4 magic to sort an array, also concatenate the 2 arrays in-place while we're at it
        readarray -t MAPS_ALL < <(printf '%s\0' "${MAPS_STOCK[@]}" "${MAPS_WORKSHOP[@]}" | sort -z | xargs -0n1)
        add_cycle_str "${MAPS_ALL[@]}"
        ${ECHO_DONE}
    fi
}

function add_bans ()
{
    echo -n "Applying bans... "
    check_file ${LIVE_CONF}/LinuxServer-KFGame.ini
    check_file ${OWN_CONF}/My-LinuxServer-KFGame.ini

    # delete all previous bans
    sed -i '/^BannedIDs.*/d' ${LIVE_CONF}/LinuxServer-KFGame.ini

    # insert bans after match
    # sed is no good here because of line breaks
    # can't do in-place, so use temp file
    # should be eliminated once gawk 4.1.0 pushed to centos
    awk -v OWN_CONF="${OWN_CONF}" '{print} $0 == "[Engine.AccessControl]" {system("grep ^BannedIDs "OWN_CONF"/My-LinuxServer-KFGame.ini")}' ${LIVE_CONF}/LinuxServer-KFGame.ini > ${LIVE_CONF}/LinuxServer-KFGame.ini.tmp
    mv -f ${LIVE_CONF}/LinuxServer-KFGame.ini.tmp ${LIVE_CONF}/LinuxServer-KFGame.ini
    ${ECHO_DONE}
}

function add_geoip ()
{
    GEOIP_CITY=$(curl -s "https://api.geoiplookup.net/?query=$(curl -s https://ipecho.net/plain)&json=true" | jq -r '.city') # stupid mcedit syntax hilight "

    if [ ! -z "${GEOIP_CITY+x}" ] && [ "${#GEOIP_CITY}" -gt 0 ]
    then
        sed -i "s/^ServerName=.*/& @ ${GEOIP_CITY}/" "${LIVE_CONF}/LinuxServer-KFGame.ini"
    fi
}

function regen_config ()
{
    merge_config
    reset_subscriptions
    subscribe_mutators
    subscribe_maps
    add_maps
    add_bans
    add_geoip

    delete_cycles
    add_cycles

    sanitize_config

    echo -e "\e[32mKilling Floor 2 server configuration applied successfully!\e[0m"
}

function purge_map ()
{
    echo "Purging map with ID ${1}... "

    echo -n 'Finding map name corresponding to ID... '
    check_file ${MAP_LIST}
    MAP_NAME=$(grep ^${1} ${MAP_LIST} | cut -d',' -f2)
    echo "${MAP_NAME}."

    echo -n 'Deleting from KFGame.ini... '
    check_file ${LIVE_CONF}/LinuxServer-KFGame.ini
    crudini --del ${LIVE_CONF}/LinuxServer-KFGame.ini "${MAP_NAME} KFMapSummary"
    ${ECHO_DONE}

    echo -n 'Deleting from KFEngine.ini... '
    check_file ${LIVE_CONF}/LinuxServer-KFEngine.ini
    sed -i "/ServerSubscribedWorkshopItems=${1}/d" ${LIVE_CONF}/LinuxServer-KFEngine.ini
    ${ECHO_DONE}

    echo -n 'Deleting from My-Maps.csv... '
    check_file ${OWN_CONF}/My-Maps.csv
    sed -i --follow-symlinks "/^${1},${MAP_NAME}/d" ${OWN_CONF}/My-Maps.csv
    ${ECHO_DONE}

    echo 'Performing complete config regeneration... '
    regen_config

    echo -n 'Deleting map files from workshop and cache... '
    rm -rf "${HOME}/Cache/${1}"
    rm -rf "${HOME}/Workshop/content/232090/${1}"
    sed -i "/${1}/,+5d" "${HOME}/Workshop/appworkshop_232090.acf"
    ${ECHO_DONE}

    echo "The ${MAP_NAME} map with ID ${1} has been completely purged."
}

function start_kf2 ()
{
    sudo /bin/systemctl start kf2.service
}

function stop_kf2 ()
{
    sudo /bin/systemctl stop kf2.service
}

function reset_kf2 ()
{
    stop_kf2

    # need to ignore custom startup, because it may specify workshop map
    # but we won't have workshop maps because we nuke the workshop dir
    # so the service would keep failing infinitely
    check_file ${OWN_CONF}/My-Startup.conf
    mv -f ${OWN_CONF}/My-Startup.conf ${OWN_CONF}/My-Startup.conf.tmp
    touch ${OWN_CONF}/My-Startup.conf
    sudo /bin/systemctl daemon-reload

    # nuke old config
    rm -f ${LIVE_CONF}/KF*.ini
    rm -f ${LIVE_CONF}/LinuxServer-*.ini

    # nuke cache
    if [ -d ${CACHE_DIR} ] && [ ! -z "$(ls -A ${CACHE_DIR})" ]
    then
        echo -n 'Removing Cache content... '
        rm -rf ${CACHE_DIR}/*
        ${ECHO_DONE}
    fi

    # nuke workshop
    if [ -d ${WORKSHOP_DIR} ] && [ ! -z "$(ls -A ${WORKSHOP_DIR})" ]
    then
        echo -n 'Removing Workshop content... '
        rm -rf ${WORKSHOP_DIR}/*
        ${ECHO_DONE}
    fi

    echo -n 'Waiting for default INI files to be generated... '
    start_kf2

    # we need KFWeb.ini to enable webadmin, which in turn generates KFWebAdmin.ini
    while [ ! -f "${LIVE_CONF}/KFWeb.ini" ]
    do
        sleep 1
    done

    # temporarily enable webadmin
    crudini --set "${LIVE_CONF}/KFWeb.ini" IpDrv.WebServer bEnabled true

    stop_kf2
    start_kf2

    # make sure all other files exist as well, otherwise klf config will be useless
    while [ ! -f "${LIVE_CONF}/KFWebAdmin.ini" ] || [ ! -f "${LIVE_CONF}/LinuxServer-KFEngine.ini" ] || [ ! -f "${LIVE_CONF}/LinuxServer-KFGame.ini" ]
    do
        sleep 1
    done

    # restore the original value
    crudini --set "${LIVE_CONF}/KFWeb.ini" IpDrv.WebServer bEnabled false

    stop_kf2
    rm -f ${OWN_CONF}/My-Startup.conf
    mv -f ${OWN_CONF}/My-Startup.conf.tmp ${OWN_CONF}/My-Startup.conf
    sudo /bin/systemctl daemon-reload

    ${ECHO_DONE}

    echo -e "\e[32mKilling Floor 2 has been reset successfully!\e[0m"
    echo
    echo -e "You may run \e[36mkillinuxfloor config\e[0m now to apply your settings again."
    echo -e "Please check \e[36mMy-Startup.conf\e[0m. If it contains any workshop map, remove it until"
    echo -e "KF2 finishes downloading workshop content, otherwise KF2 will not be able to"
    echo -e "start. You can check download status with \e[36mkillinuxfloor status workshop\e[0m."
}

function update_kf2 ()
{
    if [ "${CLASSIC_MODE}" -eq 1 ]
    then
        exit 4
    fi

    # hack: gotta use -beta without a branch name to force non-beta
    # https://forums.tripwireinteractive.com/forum/killing-floor-2/kf2-news-and-announcements/news-and-announcements-af/2321016-summer-sideshow-2018-treacherous-skies?p=2321049#post2321049
    case $# in
        0)
            steamcmd.sh +force_install_dir ./KF2Server +login anonymous +app_update 232130 -beta +exit
            ;;

        1)
            steamcmd.sh +force_install_dir ./KF2Server +login anonymous +app_update 232130 -beta $1 +exit
            ;;
    esac
}

function check_integrity ()
{
    if [ "${CLASSIC_MODE}" -eq 1 ]
    then
        dotnet "${HOME}/depotdownloader/DepotDownloader.dll" -app 232130 -depot 232131 -manifest 2346945547354693824 -validate -os linux -max-downloads 32 -dir "${HOME}/Steam/KF2Server"
    else
        case $# in
            0)
                steamcmd.sh +force_install_dir ./KF2Server +login anonymous +app_update 232130 validate -beta +exit
                ;;

            1)
                steamcmd.sh +force_install_dir ./KF2Server +login anonymous +app_update 232130 validate -beta $1 +exit
                ;;
        esac
    fi
}

function autokick ()
{
    case $1 in
        start)
            sudo /bin/systemctl start kf2autokick.service
            ;;

        stop)
            sudo /bin/systemctl stop kf2autokick.service
            ;;

        restart)
            sudo /bin/systemctl restart kf2autokick.service
            ;;

        status)
            sudo /bin/systemctl status kf2autokick.service || true
            ;;

        log)
            sudo /bin/journalctl --system --unit=kf2autokick.service --follow
            ;;

        *)
            exit 1

    esac
}

function check_install ()
{
    if [ "${CLASSIC_MODE}" -eq 1 ]
    then
        exit 4
    fi

    steamcmd.sh +force_install_dir ./KF2Server +login anonymous +app_status 232130 +exit
}

function count_lines ()
{
    RET=0

    while read -r line
    do
        [[ $line = \#* ]] || [ -z "$line" ] && continue # skip comments & empty lines
        ((RET+=1))
    done < $1
}

# $1 = link
# $2 = text
# $3 = insert line break or not
function echo_link ()
{
    if [ ${3} == true ]
    then
        echo -e "\e]8;;${1}\a${2}\e]8;;\a"
    else
        echo -en "\e]8;;${1}\a${2}\e]8;;\a"
    fi
}

function check_workshop ()
{
    echo -e "${FG_CYAN}------------------------------------------------------${COLOR_RESET}"
    echo -e "${BG_CYAN}Subscribed workshop maps:                             ${COLOR_RESET}"
    echo -e "${FG_CYAN}------------------------------------------------------${COLOR_RESET}"

    find_maps_workshop

    for id in "${!MAPS_WORKSHOP[@]}"
    do
        WORKSHOP_STATE='✅'
        CACHE_STATE='✅'
        ITEM_COLOR=''

        if [ ! -d "${WORKSHOP_CONTENT_DIR}/${id}" ] || [ ! $(find "${WORKSHOP_CONTENT_DIR}/${id}" -name '*.kfm' -type f | head -1 | grep .) ]
        then
            WORKSHOP_STATE='❌'
            ITEM_COLOR="${BG_RED}"
        fi

        if [ ! -d "${CACHE_DIR}/${id}" ] || [ ! $(find "${CACHE_DIR}/${id}" -name '*.kfm' -type f | grep .) ]
        then
            CACHE_STATE='❌'
            ITEM_COLOR="${BG_RED}"
        fi

        # Coloring
        echo -n "${ITEM_COLOR}"
        # Padding
        printf "%-16.16s%-32.32s" "${id}" "${MAPS_WORKSHOP[${id}]}"
        # Color reset, status indicator
        echo -en "${COLOR_RESET}${WORKSHOP_STATE}${CACHE_STATE}"
        # Steam workshop link
        echo_link "https://steamcommunity.com/sharedfiles/filedetails/?id=${id}" "🌐" true
    done

    echo -e "${FG_CYAN}------------------------------------------------------${COLOR_RESET}"
    echo -e "${BG_CYAN}Subscribed workshop mutators:                         ${COLOR_RESET}"
    echo -e "${FG_CYAN}------------------------------------------------------${COLOR_RESET}"

    find_mutators_workshop

    for mut in "${MUTATORS_WORKSHOP[@]}"
    do
        WORKSHOP_STATE='✅'
        CACHE_STATE='✅'
        ITEM_COLOR=''

        if [ ! -d "${WORKSHOP_CONTENT_DIR}/${mut}" ]
        then
            WORKSHOP_STATE='❌'
            ITEM_COLOR="${BG_RED}"
            mut_file=''
        else
            mut_file=$(find "${WORKSHOP_CONTENT_DIR}/${mut}" -name '*.u' -type f -printf "%f\n" | head -1)
        fi

        if [ ! $(grep . <<< ${mut_file}) ]
        then
            WORKSHOP_STATE='❌'
            ITEM_COLOR="${BG_RED}"
        fi

        if [ ! -d "${CACHE_DIR}/${mut}" ] || [ ! $(find "${CACHE_DIR}/${mut}" -name '*.u' -type f | head -1 | grep .) ]
        then
            CACHE_STATE='❌'
            ITEM_COLOR="${BG_RED}"
        fi

        # Coloring
        echo -n "${ITEM_COLOR}"

        # Padding
        printf "%-16.16s" "${mut}"

        if [ -z ${mut_file} ]
        then
            printf "%-32.32s" 'N/A'
        else
            printf "%-32.32s" "${mut_file%.*}"
        fi

        # Color reset, status indicator
        echo -en "${COLOR_RESET}${WORKSHOP_STATE}${CACHE_STATE}"
        # Steam workshop link
        echo_link "https://steamcommunity.com/sharedfiles/filedetails/?id=${mut}" "🌐" true
    done

    #echo -e "${FG_CYAN}------------------------------------------------------${COLOR_RESET}"
    #echo '(Legend: ID, name, download state, cache state, web)'
}

function check_workshop_old ()
{
    echo -n "Checking Workshop subscriptions... "

    check_file ${MUTATOR_LIST}
    count_lines ${MUTATOR_LIST}
    MUT_COUNT=${RET}

    check_file ${MAP_LIST}
    count_lines ${MAP_LIST}
    MAP_COUNT=${RET}

    SUB_COUNT=0
    ((SUB_COUNT=MUT_COUNT+MAP_COUNT))

    WORKSHOP_COUNT=0
    CACHE_COUNT=0

    if [ -d ${WORKSHOP_CONTENT_DIR} ]
    then
        WORKSHOP_COUNT=$(ls -1 ${WORKSHOP_CONTENT_DIR} | wc -l)
    fi

    if [ ${WORKSHOP_COUNT} -eq ${SUB_COUNT} ]
    then
        WORKSHOP_STR='\e[32m'
    else
        WORKSHOP_STR='\e[31m'
    fi

    if [ -d ${CACHE_DIR} ]
    then
        CACHE_COUNT=$(ls -1 ${CACHE_DIR} | wc -l)
    fi

    if [ ${CACHE_COUNT} -eq ${SUB_COUNT} ]
    then
        CACHE_STR='\e[32m'
    else
        CACHE_STR='\e[31m'
    fi

    WORKSHOP_SPACE=$(du -sm ${WORKSHOP_DIR} | awk '{print $1}')
    CACHE_SPACE=$(du -sm ${CACHE_DIR} | awk '{print $1}')

    ${ECHO_DONE}

    echo -e "Subscribed mutators: \t ${MUT_COUNT}"
    echo -e "Subscribed maps: \t ${MAP_COUNT}"
    echo -e "All subscribed items: \t ${SUB_COUNT}"
    echo '----------------------------'
    echo -e "Items in Workshop: \t ${WORKSHOP_STR}${WORKSHOP_COUNT}\e[0m (${WORKSHOP_SPACE} MB)"
    echo -e "Items in Cache: \t ${CACHE_STR}${CACHE_COUNT}\e[0m (${CACHE_SPACE} MB)"
}

function check_watchdog ()
{
    sudo /bin/systemctl status kf2watchdog.service || true
}

function check_status ()
{
    case $1 in
        service)
            sudo /bin/systemctl status kf2.service || true
            ;;

        install)
            check_install
            ;;

        watchdog)
            check_watchdog
            ;;

        workshop)
            check_workshop
            ;;

        *)
            exit 1
    esac
}

function save_backup ()
{
    DATE_STR=$(date +%Y%m%d-%H%M%S)
    BACKUP_FILE="${HOME}/Config-${DATE_STR}.tgz"
    echo -ne "Backing up current KF2 config as \e[36m${BACKUP_FILE}\e[0m... "
    tar czfh ${BACKUP_FILE} -C ${HOME} Config/*.*
    ${ECHO_DONE}
}

function steamID3_to_steamID64 ()
{
    # steamID64 = "7656" + (steamID3 + 1197960265728)
    ID64=$1
    ((ID64+=1197960265728))
    ID64="7656${ID64}"
}

function steamID64_to_steamID3 ()
{
    # steamID3 = substr(steamID64, 4) - 1197960265728
    ID3=${1:4}
    ((ID3-=1197960265728))
}

function ban_applied ()
{
    check_file ${LIVE_CONF}/LinuxServer-KFGame.ini
    RET=0
    grep "^BannedIDs=(Uid=(A=${1},B=17825793))" ${LIVE_CONF}/LinuxServer-KFGame.ini > /dev/null && RET=1 || true
}

function list_bans ()
{
    check_file ${OWN_CONF}/My-LinuxServer-KFGame.ini
    MISSING=0

    echo -e "SteamID3\tSteamID64\t\tApplied"
    echo '-----------------------------------------------'
    for line in $(grep ^BannedIDs ${OWN_CONF}/My-LinuxServer-KFGame.ini)
    do
        # extract steamID3 from banlist entry
        ID3=$(echo $line | cut -d= -f4 | cut -d, -f1)
        echo -en "[U:1:${ID3}]\t"
        steamID3_to_steamID64 "${ID3}"
        echo -en "${ID64}\t "
        ban_applied "${ID3}"

        if [ ${RET} -eq 0 ]
        then
            echo -e "\e[31mNo\e[0m"
            MISSING=1
        else
            echo -e "\e[32mYes\e[0m"
        fi
    done

    if [ ${MISSING} -eq 1 ]
    then
        echo
        echo -e "Some bans are still not applied. Don't forget to run \e[36mkillinuxfloor config\e[0m!"
    fi
}

function check_steamID64 ()
{
    echo -n 'Checking if specified ID is a valid SteamID64... '

    if [ ${#1} -ne 17 ]
    then
        exit 3
    fi

    [[ $1 == ?(-)+([0-9]) ]] || exit 3

    ${ECHO_DONE}
}

function add_ban ()
{
    check_steamID64 $1
    echo -en "Adding \e[36m$1\e[0m to ban list... "

    check_file ${OWN_CONF}/My-LinuxServer-KFGame.ini
    steamID64_to_steamID3 $1
    BAN_STR="BannedIDs=(Uid=(A=${ID3},B=17825793))"

    # simple way to skip if already added
    grep ^${BAN_STR} ${OWN_CONF}/My-LinuxServer-KFGame.ini > /dev/null || sed -i --follow-symlinks "s/\[Engine.AccessControl\]/&\n${BAN_STR}/" ${OWN_CONF}/My-LinuxServer-KFGame.ini

    ${ECHO_DONE}
    echo 'New list of banned users:'
    echo
    list_bans
}

function delete_ban ()
{
    check_steamID64 $1
    echo -en "Removing \e[36m$1\e[0m from ban list... "

    check_file ${OWN_CONF}/My-LinuxServer-KFGame.ini
    steamID64_to_steamID3 $1
    BAN_STR="BannedIDs=(Uid=(A=${ID3},B=17825793))"
    sed -i "/^${BAN_STR}/d" ${OWN_CONF}/My-LinuxServer-KFGame.ini

    ${ECHO_DONE}
    echo 'New list of banned users:'
    echo
    list_bans

    # list_bans() can't detect removal, always print this
    echo
    echo -e "To apply the removal, don't forget to run \e[36mkillinuxfloor config\e[0m!"
}

function handle_bans ()
{
    case $1 in
        list)
            list_bans
            ;;

        add)
            if [ $# -ne 2 ]
            then
                exit 1
            fi
            add_ban $2
            ;;

        del|delete)
            if [ $# -ne 2 ]
            then
                exit 1
            fi
            delete_ban $2
            ;;

        *)
            exit 1
    esac
}

function handle_watchdog ()
{
    case $1 in
        enable)
            sudo /bin/systemctl enable kf2watchdog.service
            sudo /bin/systemctl restart kf2watchdog.service
            ;;

        disable)
            sudo /bin/systemctl stop kf2watchdog.service
            sudo /bin/systemctl disable kf2watchdog.service
            ;;

        status)
            check_watchdog
            ;;

        *)
            exit 1
    esac
}

# determine if classic install or current
CLASSIC_MODE=0
if [ -f "${DEPOT_FILE}" ]
then
    CLASSIC_MODE=1
fi

# check argument count
if [ "$#" -lt 1 ] || [ "$#" -gt 3 ]
then
    exit 1
fi

# do away with 'changed on disk' warnings once and for all
sudo /bin/systemctl daemon-reload

# Add steamcmd.sh to PATH - symlinking won't work, it's trying to be too smart.
PATH="${PATH}:${HOME}/Steam"

# main()
case $1 in
    start)
        start_kf2
        ;;

    stop)
        stop_kf2
        ;;

    restart)
        sudo /bin/systemctl restart kf2.service
        ;;

    status)
        if [ $# -eq 2 ]
        then
            check_status $2
        else
            check_status service
        fi
        ;;

    update)
        if [ $# -eq 2 ]
        then
            update_kf2 $2
        else
            update_kf2
        fi
        ;;

    log)
        #sudo /bin/journalctl --system --unit=kf2.service --follow
        tail -f /home/steam/Steam/logs/kf2.txt
        ;;

    config)
        regen_config
        ;;

    purge)
        purge_map $2
        ;;

    reset)
        reset_kf2
        ;;

    verify)
        if [ $# -eq 2 ]
        then
            check_integrity $2
        else
            check_integrity
        fi
        ;;

    backup)
        save_backup
        ;;

    autokick)
        autokick $2
        ;;

    ban)
        if [ $# -eq 1 ]
        then
            handle_bans list
        else
            handle_bans "${@:2}"
        fi
        ;;

    apply)
        regen_config
        sudo /bin/systemctl restart kf2.service
        ;;

    watchdog)
        handle_watchdog $2
        ;;

    help)
        print_help
        ;;

    *)
        exit 1

esac
